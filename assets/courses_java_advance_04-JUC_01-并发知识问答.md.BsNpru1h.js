import{_ as h}from"./chunks/ArticleMetadata.BqQPtrzx.js";import{_ as p,m as k,a as r,u as d,B as o,e as n,x as c,ah as g,o as l,p as A,q as C}from"./chunks/framework.Bi-mNMmX.js";import"./chunks/theme.NLG9-6OP.js";const N=JSON.parse('{"title":"并发知识问答","description":"","frontmatter":{"title":"并发知识问答","author":"Noah","date":"2024/07/09 20:26","categories":["JUC"],"tags":["JUC","并发编程"]},"headers":[],"relativePath":"courses/java/advance/04-JUC/01-并发知识问答.md","filePath":"courses/java/advance/04-JUC/01-并发知识问答.md","lastUpdated":1721549333000}'),y={name:"courses/java/advance/04-JUC/01-并发知识问答.md"},D=n("h1",{id:"并发知识问答",tabindex:"-1"},[c("并发知识问答 "),n("a",{class:"header-anchor",href:"#并发知识问答","aria-label":'Permalink to "并发知识问答"'},"​")],-1),B=g(`<nav class="table-of-contents"><ul><li><a href="#进程">进程</a></li><li><a href="#线程">线程</a></li><li><a href="#知识问答">知识问答</a></li></ul></nav><h2 id="进程" tabindex="-1">进程 <a class="header-anchor" href="#进程" aria-label="Permalink to &quot;进程&quot;">​</a></h2><p>在操作系统中，一个程序没有运行起来的时候叫做程序，运行起来的时候就会变成进程。每个程序启动了都会创建一个进程。例如: <code>WeChat.exe</code>，<code>QQLive.exe</code></p><h2 id="线程" tabindex="-1">线程 <a class="header-anchor" href="#线程" aria-label="Permalink to &quot;线程&quot;">​</a></h2><p>线程是进程的一个执行流，是 CPU 调度和分派的基本单位，必比进程更小的能独立运行的基本单位。一个进程由多个线程组成。</p><p>例如：<code>WeChat.exe</code> 中的发送消息和接受消息。<code>QQLive.exe</code> 中 字幕放映是一个线程，视频播放是一个线程，声音播放也是一个线程。</p><h2 id="知识问答" tabindex="-1">知识问答 <a class="header-anchor" href="#知识问答" aria-label="Permalink to &quot;知识问答&quot;">​</a></h2><details class="details custom-block"><summary>问：Java真的能开启线程吗？</summary><p>答：开不了，开启线程，对于Java而言有三种方式 1.继承Thread类、2.实现Runnable接口、3.实现Callable接口。最后都要走Thread的start方法来开启线程，而start的底层源码调用了本地方法栈(Java Native Stack)的方法，本地方法栈的方法是去调用底层C++的方法。</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> synchronized</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> start</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (threadStatus </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> IllegalThreadStateException</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">add</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    boolean</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> started</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        start0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        started </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">finally</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        try</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">            if</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">started) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">                group.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">threadStartFailed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (Throwable </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">ignore</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 本地方法， 底层的C++， Java无法直接操作硬件</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">private</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> native</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> start0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span></code></pre></div></details><details class="details custom-block"><summary>问：并发和并行的区别？</summary><p>答：并发是多个线程操作同一个资源：CPU单核，模拟出来多条线程；并行是指多核CPU，多个线程同时执行。并发编程的本质是充分利用CPU的资源。</p></details><details class="details custom-block"><summary>问：线程有几个状态？</summary><p>答：五个，分别是新生、运行、堵塞、等待、超时等待、终止</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> enum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> State</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">    // 新生</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 运行</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    RUNNABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 堵塞</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    BLOCKED</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 等待，死死地等</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    WAITING</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 超时等待</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    TIMED_WAITING</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">	// 终止</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    TERMINATED</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">}</span></span></code></pre></div></details><details class="details custom-block"><summary>问：wait()/sleep()的区别？</summary><p>答：</p><ol><li><strong>来自不同的类:</strong><ul><li><strong>wait:</strong> 来自Object。</li><li><strong>sleep:</strong> 来自Thread。</li></ul></li><li><strong>关于锁的释放:</strong><ul><li><strong>wait:</strong> 会释放锁。</li><li><strong>sleep:</strong> 不会释放锁。</li></ul></li><li><strong>使用范围不同:</strong><ul><li><strong>wait:</strong> 同步代码块中。</li><li><strong>sleep:</strong> 任何地方。</li></ul></li></ol></details>`,11);function u(s,F,m,E,_,v){const t=h,e=k("ClientOnly");return l(),r("div",null,[D,d(e,null,{default:o(()=>{var a,i;return[(((a=s.$frontmatter)==null?void 0:a.aside)??!0)&&(((i=s.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(l(),A(t,{key:0,article:s.$frontmatter},null,8,["article"])):C("",!0)]}),_:1}),B])}const x=p(y,[["render",u]]);export{N as __pageData,x as default};
