import{_ as p}from"./chunks/ArticleMetadata.Ba4icgGF.js";import{_ as r,m as h,a as o,u as d,B as c,e as t,x as k,ah as g,o as e,p as u,q as m}from"./chunks/framework.Bi-mNMmX.js";import"./chunks/theme.--nR5Zd2.js";const J=JSON.parse('{"title":"数组","description":"","frontmatter":{"title":"数组","author":"Noah","date":"2024/06/24 14:05","categories":["Java基础入门"],"tags":["Java","基础","JDK","数组"]},"headers":[],"relativePath":"courses/java/basic/01-Java基础入门/03-数组.md","filePath":"courses/java/basic/01-Java基础入门/03-数组.md","lastUpdated":1719399271000}'),y={name:"courses/java/basic/01-Java基础入门/03-数组.md"},v=t("h1",{id:"数组",tabindex:"-1"},[k("数组 "),t("a",{class:"header-anchor",href:"#数组","aria-label":'Permalink to "数组"'},"​")],-1),A=g(`<div class="info custom-block"><p class="custom-block-title"><strong>前言</strong></p><p>在上一章中，介绍了Java中的引用数据类型以及与基本数据类型的区别。简而言之除了基本数据类就是引用数据类型，引用数据类型包括：<strong>类(Class)</strong>、<strong>接口(Interface)</strong>、<strong>数组(Array)</strong>、<strong>枚举(Enum)</strong>、<strong>字符串(String)</strong>、<strong>集合框架(Collections Framework)</strong>、<strong>异常(Exception)</strong>。在这一章，重点介绍引用数据类型中的数组。</p></div><hr><nav class="table-of-contents"><ul><li><a href="#数组的定义">数组的定义</a></li><li><a href="#数组声明创建">数组声明创建</a></li><li><a href="#数组的四个基本特点">数组的四个基本特点</a></li><li><a href="#内存分析">内存分析</a></li><li><a href="#二维数组">二维数组</a></li><li><a href="#小结">小结</a></li></ul></nav><h2 id="数组的定义" tabindex="-1">数组的定义 <a class="header-anchor" href="#数组的定义" aria-label="Permalink to &quot;数组的定义&quot;">​</a></h2><ul><li>数组是相同类型数据的有序集合</li><li>数组描述的是相同类型的若干个数据，按照一定的先后顺序排列组合而成</li><li>每一个数据称作一个数组元素，每个数组元素可以通过一个下标来访问</li></ul><h2 id="数组声明创建" tabindex="-1">数组声明创建 <a class="header-anchor" href="#数组声明创建" aria-label="Permalink to &quot;数组声明创建&quot;">​</a></h2><p>首先必须声明数组变量，才能在程序中使用数组，声明数组变量语法如下：</p><div class="language-Java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">Java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 方法一(推荐)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> dataType 代指 数据类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 要什么数组，就写什么数据类型</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dataType[] arrayRefVar;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">/**</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> 方法二</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">*/</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dataType arrayRefVar[];</span></span></code></pre></div><p>Java语言使用new操作符来创建数组，语法如下</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dataType[] arrayRefVar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> dataType[arraySuze]</span></span></code></pre></div><p>数值的元素是通过索引访问的，数组索引从<code>0</code>开始</p><p>获取数组的长度：<code>arrays.length</code></p><p>给数组赋值语法如下：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">dataType[] arrayRefVar;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">arrayRefVar[index] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> value</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title"><strong>注意</strong>💡</p><p>按照数组下标取值，如果当前下标没有赋值，Java会自动给该下标设置当前类型的默认值。</p></div><h2 id="数组的四个基本特点" tabindex="-1">数组的四个基本特点 <a class="header-anchor" href="#数组的四个基本特点" aria-label="Permalink to &quot;数组的四个基本特点&quot;">​</a></h2><ul><li>其长度是确定的。数组一旦被创建，大小是不可改变的。</li><li>其元素必须是相同类型，不允许出现混合类型</li><li>其元素可以是任何数据类型，包括基本数据类型和引用数据类型</li><li>数组变量属于引用数据类型，数组也可以看做为对象，数组中的每个元素相当于该对象的成员变量。数组本身就是对象，<code>Java</code> 中对象是在堆中的，因此数值无论保存原始类型还是其他对象类型，数组对象本身就是在堆中</li></ul><h2 id="内存分析" tabindex="-1">内存分析 <a class="header-anchor" href="#内存分析" aria-label="Permalink to &quot;内存分析&quot;">​</a></h2><p>声明数组时，Java只会在栈里面开辟一个空间存放数组。如下图所示：</p><p><img src="https://raw.githubusercontent.com/Noah2Y/img/main/blog/20240624154441.png" alt=""></p><p>创建数值时，Java会在堆内存中开辟一片空间，并且创建好数组的大小。</p><p><img src="https://raw.githubusercontent.com/Noah2Y/img/main/blog/20240624154441-1.png" alt=""></p><p>数组元素赋值时，Java会在堆内存中给当前数组指向的内存空间中根据下标给数组元素赋值。</p><p><img src="https://raw.githubusercontent.com/Noah2Y/img/main/blog/20240624154441-2.png" alt=""></p><div class="warning custom-block"><p class="custom-block-title"><strong>注意</strong>💡</p><p>按照数组下标取值，如果当前下标不存在，则 <code>Java</code> 会抛 <code>java.lang.ArrayIndexOutOfBoundsException</code> (数组下标越界异常)</p></div><h2 id="二维数组" tabindex="-1">二维数组 <a class="header-anchor" href="#二维数组" aria-label="Permalink to &quot;二维数组&quot;">​</a></h2><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 普通数组声明方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 声明一个大小为10的数组</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 二维数组声明方式</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">int</span><span style="--shiki-light:#24292E;--shiki-dark:#F69D50;">[] </span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">][</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 可以看成一个两行五列的数组</span></span></code></pre></div><p>图解：</p><p><img src="https://raw.githubusercontent.com/Noah2Y/img/main/blog/20240624193237.png" alt=""></p><p>以上是一个 <code>arr[1][1]</code> 的二维数组图解。其中 <code>arr[0]</code> 包括了<code>arr[0][0]</code> 与 <code>arr[0][1]</code> 两个元素，<code>arr[1]</code> 包括了<code>arr[1][0]</code> 与 <code>arr[1][1]</code> 两个元素</p><div class="warning custom-block"><p class="custom-block-title"><strong>注意</strong>💡</p><p>二维数值直接打印输出的结果是地址值，因为二维数组里面本身也是一个数组。在上一章中讲到了数值本身就是对象。</p></div><h2 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h2><ul><li>数组是相同数据类型的有序集合</li><li>数组也是对象，数组的元素相当于对象的成员变量</li><li>数组的长度是确定的，不可变。如果越界，则报：<code>ArrayIndexOutOfBoundsException</code></li></ul>`,33);function b(a,D,C,_,f,B){const n=p,l=h("ClientOnly");return e(),o("div",null,[v,d(l,null,{default:c(()=>{var s,i;return[(((s=a.$frontmatter)==null?void 0:s.aside)??!0)&&(((i=a.$frontmatter)==null?void 0:i.showArticleMetadata)??!0)?(e(),u(n,{key:0,article:a.$frontmatter},null,8,["article"])):m("",!0)]}),_:1}),A])}const w=r(y,[["render",b]]);export{J as __pageData,w as default};
