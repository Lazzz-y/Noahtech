import{_ as l}from"./chunks/ArticleMetadata.BqQPtrzx.js";import{_ as n,m as c,a as d,u as h,B as u,e as s,x as p,ah as _,o,p as m,q as b}from"./chunks/framework.Bi-mNMmX.js";import"./chunks/theme.NLG9-6OP.js";const V=JSON.parse('{"title":"Redis发布订阅","description":"","frontmatter":{"title":"Redis发布订阅","author":"Noah","date":"2024/07/08 13:50","categories":["Redis进阶"],"tags":["Redis","Redis进阶"]},"headers":[],"relativePath":"courses/数据库/04-Redis进阶/04-Redis发布订阅.md","filePath":"courses/数据库/04-Redis进阶/04-Redis发布订阅.md","lastUpdated":1720612269000}'),g={name:"courses/数据库/04-Redis进阶/04-Redis发布订阅.md"},f=s("h1",{id:"redis发布订阅",tabindex:"-1"},[p("Redis发布订阅 "),s("a",{class:"header-anchor",href:"#redis发布订阅","aria-label":'Permalink to "Redis发布订阅"'},"​")],-1),R=_('<nav class="table-of-contents"><ul><li><a href="#发布订阅模型">发布订阅模型</a></li><li><a href="#核心数据结构">核心数据结构</a></li><li><a href="#消息发送机制">消息发送机制</a></li><li><a href="#性能和扩展">性能和扩展</a></li></ul></nav><div class="tip custom-block"><p class="custom-block-title">什么是发布订阅？😦</p><p>Redis 的发布订阅(Pub/Sub) 是消息传递模式之一，它允许消息发送者(发布者)将消息发布到频道(channel)，然后所有订阅了这些频道的接受者(订阅者)会接收到相应的信息。该模式适用于需要实时消息传递的场景，例如聊天系统、实时通知、数据推送等。</p></div><h2 id="发布订阅模型" tabindex="-1">发布订阅模型 <a class="header-anchor" href="#发布订阅模型" aria-label="Permalink to &quot;发布订阅模型&quot;">​</a></h2><p>发布订阅分为三个模型板块：</p><ul><li><strong>发布者(Publisher):</strong> 发送消息到特定频道的客户端。</li><li><strong>订阅者(Subscriber):</strong> 订阅某个频道以接受发布者发送的消息的客户端。</li><li><strong>频道(Channel):</strong> 消息传输的通道，发布者将消息发布到特定频道，订阅者收到频道中的消息。</li></ul><img src="https://raw.githubusercontent.com/Noah2Y/img/main/blog/20240708141331.jpg" style="zoom:67%;"><h2 id="核心数据结构" tabindex="-1">核心数据结构 <a class="header-anchor" href="#核心数据结构" aria-label="Permalink to &quot;核心数据结构&quot;">​</a></h2><p>Redis 发布订阅功能主要依赖以下三种数据结构：</p><ol><li><strong>订阅记录表（<code>pubsub_channels</code>）</strong>：哈希表（dictionary），键是频道名，值是订阅这个频道的客户端列表。</li><li><strong>模式记录表（<code>pubsub_patterns</code>）</strong>：链表（list），存储了所有订阅模式的客户端和对应的模式。</li><li><strong>客户端结构</strong>：每个客户端有两个字段分别保存它所订阅的频道和模式列表。</li></ol><h2 id="消息发送机制" tabindex="-1">消息发送机制 <a class="header-anchor" href="#消息发送机制" aria-label="Permalink to &quot;消息发送机制&quot;">​</a></h2><p>在发布订阅系统中，消息的发送过程是异步的，这意味着 PUBLISH 命令的执行不会被消息投递给订阅者的过程阻塞。但是，对于接收到消息的订阅者，消息投递是同步的，即 Redis 会立即将消息传递给订阅者。</p><h2 id="性能和扩展" tabindex="-1">性能和扩展 <a class="header-anchor" href="#性能和扩展" aria-label="Permalink to &quot;性能和扩展&quot;">​</a></h2><p>Redis 发布订阅是内存级操作，性能非常高，适合小规模、单节点的应用场景。然而，在高并发、多节点、大规模分布式系统中，Redis 的发布订阅模式存在以下几个限制:</p><ul><li><strong>消息不持久化:</strong> 一点消息发布，如果订阅者未在线，则消息将丢失。这对于需要高可靠性消息传递的场景可能不适用。</li><li><strong>单节点限制:</strong> Redis 发布订阅的实现基于单节点内存结构，多节点环境下，无法实现跨节点的频道订阅和消息传递。</li><li><strong>扩展性问题:</strong> 高并发时，单节点的网络 I/O 和内存消耗可能成为瓶颈，需要进行高并发性能优化或者选择其他的消息中间件解决方案。</li></ul><div class="info custom-block"><p class="custom-block-title">其他解决方案😋</p><p>熟悉消息中间件的同学都知道，针对消息订阅发布功能，市面上很多大厂使用的是<code>kafka</code>、<code>RabbitMQ</code>、<code>ActiveMQ</code>, <code>RocketMQ等这几种，</code>redis的订阅发布功能跟这三者相比，相对轻量，针对数据准确和安全性要求没有那么高可以直接使用，适用于小公司。</p></div>',15);function k(e,P,v,q,N,x){const i=l,r=c("ClientOnly");return o(),d("div",null,[f,h(r,null,{default:u(()=>{var t,a;return[(((t=e.$frontmatter)==null?void 0:t.aside)??!0)&&(((a=e.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(o(),m(i,{key:0,article:e.$frontmatter},null,8,["article"])):b("",!0)]}),_:1}),R])}const $=n(g,[["render",k]]);export{V as __pageData,$ as default};
